/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ReviewManager;
import data.Words;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.Timer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Rhadryn
 */
public class ReviewPanel extends javax.swing.JPanel {
    HomeView home;
    ArrayList<Words> curWords;
    Words curText;
    Timer typeTimer;
    int wrong;

    /**
     * Creates new form ReviewPanel
     */
    public ReviewPanel(HomeView home, ArrayList<Words> curWords) {
        initComponents();
        
        this.home = home;
        this.curWords = curWords;
        
        //MAYBE CHANGE LATER
        this.curText = curWords.get(0);
        this.curWords = curWords;
        this.curWords.remove(0);
        
        indicesLabel.setText(curText.indicesToString());
        nextReviewLabel.setVisible(false);
        wrong = 0;
        
        /**
         * Compares typed text with correct text.
         */
        ActionListener checkText = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent event){
                correctText();
                calculateStats();
            }
        };
        
        textPane.getDocument().addDocumentListener(new DocumentListener()
           {
                public void changedUpdate(DocumentEvent dEvent) {
                    react(dEvent);
                }
                public void insertUpdate(DocumentEvent dEvent) {
                    react(dEvent);
                }
                public void removeUpdate(DocumentEvent dEvent) {
                    react(dEvent);
                }
                private void react(DocumentEvent dEvent) {                                  
                    typeTimer.stop();
                    typeTimer.start();

                    //Calculate progress:
                    int total = curText.getText().length();
                    int typed = textPane.getText().length();
                    int progress = (int)Math.round((typed / (double)total) * 100);
                    reviewProgress.setValue(progress);
                    reviewProgress.setString(String.format("%d/%d", typed, total));
                    reviewProgress.repaint();
                }
           });        
        typeTimer = new Timer(ReviewManager.CORRECTIONDELAY, checkText);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        skipButton = new javax.swing.JButton();
        indicesLabel = new javax.swing.JLabel();
        reviewProgress = new javax.swing.JProgressBar();
        errorLabel = new javax.swing.JLabel();
        percentLabel = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        textPane = new javax.swing.JTextPane();
        nextReviewLabel = new javax.swing.JLabel();
        nextDateLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(210, 255, 210));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        skipButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        skipButton.setText("Skip");
        skipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skipButtonActionPerformed(evt);
            }
        });

        indicesLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        indicesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        indicesLabel.setText("Indices");

        reviewProgress.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        reviewProgress.setForeground(new java.awt.Color(0, 0, 0));
        reviewProgress.setStringPainted(true);

        errorLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorLabel.setText("Accuracy:");

        percentLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        percentLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        percentLabel.setText("100%");

        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setAutoscrolls(true);

        textPane.setBackground(new java.awt.Color(250, 250, 250));
        textPane.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scrollPane.setViewportView(textPane);

        nextReviewLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        nextReviewLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nextReviewLabel.setText("Next review due:");

        nextDateLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        nextDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(skipButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(indicesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(percentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nextReviewLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nextDateLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reviewProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                            .addComponent(scrollPane))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(indicesLabel)
                        .addGap(30, 30, 30)
                        .addComponent(errorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(percentLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                        .addComponent(nextReviewLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextDateLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(scrollPane)))
                .addGap(18, 18, 18)
                .addComponent(reviewProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(skipButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void skipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipButtonActionPerformed
        if(curWords.size() > 0){
            home.reviewText(curWords);
        }
        else{
            home.reviewClose(this);
        }
    }//GEN-LAST:event_skipButtonActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        //Be able to type immediately:
        textPane.requestFocus();
    }//GEN-LAST:event_formComponentShown

    private void correctText(){
        StyledDocument doc = textPane.getStyledDocument();
        Style rstyle = textPane.addStyle("red", null);
        StyleConstants.setForeground(rstyle, Color.red);
        Style bstyle = textPane.addStyle("black", null);
        StyleConstants.setForeground(bstyle, Color.black);
        String typed = textPane.getText();
        if(typed.length() >= curText.getText().length()){
            typed = typed.substring(0, curText.getText().length());
        }
        for(int i = 0; i < typed.length(); i++){
            char correct = curText.getText().charAt(i);
            if(typed.charAt(i) != correct){
                //Forgive commas:
                if(correct == ','){
                    try {
                        doc.insertString(i, 
                                Character.toString(correct), bstyle); }
                    catch (BadLocationException e){}
                    typed = textPane.getText();
                    continue;
                }
                //Mistakes:
                wrong++;
                try { 
                    doc.remove(i, 1);
                    doc.insertString(i, 
                            Character.toString(correct), bstyle); }
                catch (BadLocationException e){}
                doc.setCharacterAttributes(i, 1, rstyle, true);
            }
        }
        if(typed.length() >= curText.getText().length()){
            completeText();
        }
    }
    
    private void completeText(){
        //Data recording
        int accuracy = (int)(100 - 
                (((double)wrong / curText.getText().length()) * 100));
        curText.reviewComplete(accuracy);        
        
        //GUI Changes
        //textPane.setEditable(false);
        typeTimer.removeActionListener(typeTimer.getActionListeners()[0]);
        nextReviewLabel.setVisible(true);
        nextDateLabel.setText(curText.getNextDateText());
        skipButton.setText("Finished");
        skipButton.requestFocus();
    }
    
    private void calculateStats(){
        //Calculate accuracy:
        int typed = textPane.getText().length();
        double accuracy = 100 - (((double)wrong / typed) * 100);
        percentLabel.setText(String.format("%d%%", 
                Math.round(accuracy)));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel indicesLabel;
    private javax.swing.JLabel nextDateLabel;
    private javax.swing.JLabel nextReviewLabel;
    private javax.swing.JLabel percentLabel;
    private javax.swing.JProgressBar reviewProgress;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JButton skipButton;
    private javax.swing.JTextPane textPane;
    // End of variables declaration//GEN-END:variables
}
